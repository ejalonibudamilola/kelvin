/*
 * Copyright (c) 2021.
 * This code is proprietary to GNL Systems Ltd. All rights reserved.
 */

package com.osm.gnl.ippms.ogsg.domain.deduction;

import com.osm.gnl.ippms.ogsg.abstractentities.AbstractDescControlEntity;
import com.osm.gnl.ippms.ogsg.domain.payment.BankBranch;
import com.osm.gnl.ippms.ogsg.domain.payment.PayTypes;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;

/**
 *  Uses Composite Unique Key
 *  businessClient & AbstractNamedEntity.name
 */
@Entity
@Table(name = "ippms_deduction_type")
@SequenceGenerator(name = "empDedTypeSeq", sequenceName = "ippms_deduction_type_seq", allocationSize = 1)
@NoArgsConstructor
@Getter
@Setter
public class EmpDeductionType extends AbstractDescControlEntity {
    private static final long serialVersionUID = -1094146477559569248L;

    @Id
    @GeneratedValue(generator = "empDedTypeSeq", strategy = GenerationType.SEQUENCE)
    @Column(name = "deduction_type_inst_id")
    private Long id;

    @ManyToOne
    @JoinColumn(name = "deduction_cat_inst_id", nullable = false)
    private EmpDeductionCategory empDeductionCategory;



    @Column(name = "business_client_inst_id", nullable = false)
    private Long businessClientId;

    @ManyToOne
    @JoinColumn(name = "branch_inst_id", nullable = false)
    private BankBranch bankBranches;

    @Column(name = "taxable", columnDefinition = "varchar(1) default 'N'", nullable = false)
    private String taxable;

    @Column(name = "sub_type_enable", columnDefinition = "varchar(1) default 'Y'", nullable = false)
    private String subTypeEnable;

    @Column(name = "company_type_enable", columnDefinition = "varchar(1) default 'Y'", nullable = false)
    private String companyTypeEnable;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "pay_types_inst_id", nullable = false)
    private PayTypes payTypes;

    @Column(name = "amount", columnDefinition = "numeric(10,2) default '0.00'", nullable = false)
    private double amount;

    @Column(name = "account_number", columnDefinition = "varchar(10)", nullable = false)
    private String accountNumber;

    @Column(name = "description", columnDefinition = "varchar(120)", nullable = false)
    private String description;

    @Column(name = "date_dependent", columnDefinition = "integer default '0'", nullable = false)
    private int dateDependent;

    @Column(name = "restrict_edit_ind", columnDefinition = "integer default '0'", nullable = false)
    private int editRestrictionInd;

    /**
     * Used only for Range Type Deductions.
     */
    @Column(name = "auto_gen_ind", columnDefinition = "integer default '0'", nullable = false)
    private int autoGenInd;

    /**
     * OGS SUBEB Merge. 10/10/2020
     */
    @Column(name = "union_due_type", columnDefinition = "integer default '0'", nullable = false)
    private int unionDueInd;

    @Column(name = "displayable_ind", columnDefinition = "integer default '0'", nullable = false)
    private int displayableInd;

    /**
     * Apportionment for LG Pension
     */
    @Column(name = "first_allotment", columnDefinition = "varchar(15)" )
    private String firstAllotment;
    @Column(name = "first_allotment_amount", columnDefinition = "numeric(5,2) default '0.00'" )
    private double firstAllotAmt;
    @Column(name = "second_allotment", columnDefinition = "varchar(15)" )
    private String secAllotment;
    @Column(name = "sec_allotment_amount", columnDefinition = "numeric(5,2) default '0.00'" )
    private double secAllotAmt;
    @Column(name = "third_allotment", columnDefinition = "varchar(10)" )
    private String thirdAllotment;
    @Column(name = "third_allotment_amount", columnDefinition = "numeric(5,2) default '0.00'" )
    private double thirdAllotAmt;


    @Transient private String firstAllotAmtStr;
    @Transient private String secAllotAmtStr;
    @Transient private String thirdAllotAmtStr;
    @Transient private String confirmAccountNumber;
    @Transient private boolean warningIssued;
    @Transient private boolean mustEnterDate;
    @Transient private boolean groupDeduction;
    @Transient private boolean updAcctDetails;
    @Transient private String oldAcctNo;
    @Transient private Long oldBranchInstId;
    @Transient private boolean showUpdPaychecksLink;
    @Transient private Long empDeductCatRef;
    @Transient private Long empDeductPayTypeRef;
    @Transient private boolean isInherited;
    @Transient private Long bankInstId;
    @Transient private Long branchInstId;
    @Transient private boolean unionDueType;
    @Transient private boolean errorRecord;
    @Transient private boolean updPendingPaychecks;
    @Transient private boolean autoGenerated;
    @Transient private boolean showApportionsRows;

    public EmpDeductionType(Long pId) {
        this.id = pId;
    }

    public EmpDeductionType(Long pId, Integer pDateDependentInd) {
        this.id = pId;
        this.dateDependent = pDateDependentInd;
    }

    public boolean isMustEnterDate() {
        return this.dateDependent == 1;
    }

    public boolean isUpdAcctDetails() {
        if ((this.accountNumber != null &&
                !this.accountNumber.equalsIgnoreCase(this.oldAcctNo))
                || !(this.branchInstId.equals(this.oldBranchInstId))) {
            updAcctDetails = true;
        }
        return updAcctDetails;
    }


    public boolean isUnionDueType() {
        this.unionDueType = this.getUnionDueInd() == 1 ? true : false;
        return this.unionDueType;
    }

    @Override
    public int compareTo(Object o) {
        return 0;
    }

    @Override
    public boolean isNewEntity() {

        return this.id == null;
    }

    public boolean isEditRestricted() {

        return this.editRestrictionInd > 0;
    }

    public boolean isAutoGenerated() {
        autoGenerated = this.autoGenInd == 1;
        return autoGenerated;
    }

    public void setErrorRecord(boolean errorRecord) {
        this.errorRecord = errorRecord;
    }

    public boolean getErrorRecord() {
        return errorRecord;
    }

    public boolean getUpdPendingPaychecks() {
        return updPendingPaychecks;
    }

    public void setUpdPendingPaychecks(boolean updPendingPaychecks) {
        this.updPendingPaychecks = updPendingPaychecks;
    }
}